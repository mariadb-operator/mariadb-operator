# Please, take a look at our HA guide to configure production-ready MariaDB instances:
# https://github.com/mariadb-operator/mariadb-operator/blob/main/docs/high_availability.md
# Configure a backup and recovery strategy in case that something goes wrong:
# https://github.com/mariadb-operator/mariadb-operator/blob/main/docs/logical_backup.md
# Roll out upgrades choosing the right upgrade strategy:
# https://github.com/mariadb-operator/mariadb-operator/blob/main/docs/updates.md
apiVersion: k8s.mariadb.com/v1alpha1
kind: MariaDB
metadata:
  name: mariadb-galera
spec:
  rootPasswordSecretKeyRef:
    name: mariadb
    key: root-password

  storage:
    size: 10Gi

  # Recreate the MariaDB resource and bootstrap from a backup in S3.
  # bootstrapFrom:
  #   s3:
  #     bucket: backups
  #     prefix: mariadb
  #     endpoint: minio.minio.svc.cluster.local:9000
  #     accessKeyIdSecretKeyRef:
  #       name: minio
  #       key: access-key-id
  #     secretAccessKeySecretKeyRef:
  #       name: minio
  #       key: secret-access-key
  #     tls:
  #       enabled: true
  #       caSecretKeyRef:
  #         name: minio-ca
  #         key: ca.crt
  #   targetRecoveryTime: 2023-12-19T09:00:00Z
  #   stagingStorage:
  #     persistentVolumeClaim:
  #       resources:
  #         requests:
  #           storage: 10Gi
  #       accessModes:
  #         - ReadWriteOnce
  #   restoreJob:
  #     resources:
  #       requests:
  #         cpu: 100m
  #         memory: 128Mi
  #       limits:
  #         memory: 1Gi

  replicas: 3

  galera:
    enabled: true

  metrics:
    enabled: true

  # Issue and configure TLS certificates. For enhanced security, TLS will be enforced in all connections .
  tls:
    enabled: true
    required: true

  updateStrategy:
    type: ReplicasFirstPrimaryLast
    # Pause updates.
    # type: Never
    # Update the data-plane after an operator upgrade.
    # autoUpdateDataPlane: true

  # Configure enough compute resources. This is just an example, take a look at your historic compute metrics to estimate.
  resources:
    requests:
      cpu: 1
      memory: 4Gi
    limits:
      memory: 4Gi

  # Tune your liveness probe accordingly to avoid Pod restarts.
  livenessProbe:
    periodSeconds: 5
    timeoutSeconds: 5

  # Tune your readiness probe accordingly to prevent disruptions in network traffic.
  readinessProbe:
    periodSeconds: 5
    timeoutSeconds: 5

  # Tune your startup probe accordingly to the delay needed for full sst completion.
  startupProbe:
    failureThreshold: 10
    periodSeconds: 5
    timeoutSeconds: 5

  # innodb_buffer_pool_size: 80% of memory limits.
  myCnf: |
    [mariadb]
    bind-address=*
    default_storage_engine=InnoDB
    binlog_format=row
    innodb_autoinc_lock_mode=2
    innodb_buffer_pool_size=3200MB
    max_allowed_packet=1GB

  # Select a node type with enough compute capacity.
  nodeSelector:
    kubernetes.io/arch: amd64  

  # Schedule Pods in different Nodes to achieve real HA.
  affinity:
    antiAffinityEnabled: true

  # When draining Nodes, make sure that you have at least 2 Pods available.
  podDisruptionBudget:
    maxUnavailable: 66%

  # Ensure that the Pods are not preempted by Kubernetes to make room for new scheduled Pods.
  priorityClassName: system-node-critical