
`{{ .ProjectName }}` __[v0.0.33](https://github.com/mariadb-operator/mariadb-operator/releases/tag/v0.0.33)__ is out! ü¶≠

This release ships new features and improvements focused on fleet management, upgrades and deployments. We have also fixed some regressions introduced in [v0.0.32](https://github.com/mariadb-operator/mariadb-operator/releases/tag/v0.0.32), thanks to our vibrant community for having tested the release so early and reporting the issues!

To upgrade from older versions, be sure to follow the __[UPGRADE GUIDE](https://github.com/mariadb-operator/mariadb-operator/blob/main/docs/UPGRADE_v0.0.33.md)__.

### Data-plane updates

Galera relies on [data-plane containers](https://github.com/mariadb-operator/mariadb-operator/tree/main/docs/GALERA.md#data-plane) that run alongside MariaDB to implement provisioning and high availability operations on the cluster. These containers use the `mariadb-operator` image, which can be automatically updated by the operator based on its image version:

```yaml
apiVersion: k8s.mariadb.com/v1alpha1
kind: MariaDB
metadata:
  name: mariadb-galera
spec:
  updateStrategy:
    autoUpdateDataPlane: true
```
By default, `updateStrategy.autoUpdateDataPlane` is `false`, which means that no automatic upgrades will be performed, but you can opt-in/opt-out from this feature at any point in time by updating this field. For instance, you may want to selectively enable `updateStrategy.autoUpdateDataPlane` in a subset of your `MariaDB` instances after the operator has been upgraded to a newer version, and then disable it once the upgrades are completed.

### Pause updates via `Never` update strategy

With this new update strategy set, the operator will `Never` perform updates on the `StatefulSet`. This could be useful in multiple scenarios:
- __Progressive fleet upgrades__: If you're managing large fleets of of databases, you likely prefer to roll out updates progressively rather than simultaneously across all instances.
- __Operator upgrades__: When upgrading `mariadb-operator`, changes to the `StatefulSet` or the `Pod` template may occur from one version to another, which could trigger a rolling update of your `MariaDB` instances.

You can configure this new strategy by setting:

```yaml
apiVersion: k8s.mariadb.com/v1alpha1
kind: MariaDB
metadata:
  name: mariadb-galera
spec:
  updateStrategy:
    type: Never
``` 

It is important to note that this feature is fully compatible with `autoUpdateDataPlane`: no upgrades will happen when `updateStrategy.autoUpdateDataPlane=true` and `updateStrategy.type=Never`.

### New `mariadb-operator-crds` Helm chart

Helm has certain [limitations when it comes to manage CRDs](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/#some-caveats-and-explanations). To address this, we are providing the CRDs in a separate chart, [as recommended by the official Helm documentation](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/#method-2-separate-charts). This allows us to manage the installation and updates of the CRDs independently from the operator Helm chart. For example, you can uninstall the operator without impacting your existing `MariaDB` CRDs.

CRDs can now be installed/upgraded in your cluster by running the following commands

```bash
helm repo add mariadb-operator https://helm.mariadb.com/mariadb-operator
helm repo update
helm upgrade --install mariadb-operator-crds mariadb-operator/mariadb-operator-crds
```

### ~81% CRD size reduction

Have you seen this before?

```bash
Secret "sh.helm.release.v1.x.v1" is invalid: data: Too long: must have at most 1048576 character
```
Helm has a 1MB size hard-limit on releases, which was an issue for us, as our [CRD bundle was 3.1MB](https://github.com/mariadb-operator/mariadb-operator/blob/v0.0.31/deploy/crds/crds.yaml) in previous releases. This made it incompatible with Helm, leaving `kubectl apply` as the only option for upgrading CRDs.

To address this, we have reduced the size of our CRDs by replacing the upstream Kubernetes types, which were used directly in our CRDs, with a more lightweight version of these types that only contain the fields we support. See https://github.com/mariadb-operator/mariadb-operator/pull/869.

Our [CRD bundle is now 580KB](https://github.com/mariadb-operator/mariadb-operator/blob/v0.0.33/deploy/crds/crds.yaml), an ~81% slimmer than before!  üßπ

### Single namespace deployment

By setting `currentNamespaceOnly=true` when installing the `mariadb-operator` Helm chart, the operator will only watch CRDs within the namespace it is deployed in, and the RBAC permissions will be restricted to that namespace as well:

```bash
helm repo add mariadb-operator https://helm.mariadb.com/mariadb-operator
helm install mariadb-operator \
  -n databases --create-namespace \
  --set currentNamespaceOnly=true \
  mariadb-operator/mariadb-operator
```

This is more locked-down alternative to the default cluster-wide installation.

### Basic auth support in Galera agent

By default, the operator uses its `ServiceAccount` token as a mean of  authentication for communicating with the Galera agent, which subsequently verifies the token by creating a [`TokenReview` object](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/). This Kubernetes-native authentication mechanism eliminates the need for the operator to manage credentials, as it relies entirely on Kubernetes for this purpose. However, the drawback is that the agent requires cluster-wide permissions to impersonate the [`system:auth-delegator`](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#other-component-roles) `ClusterRole` and to create [`TokenReviews`](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/), which are cluster-scoped objects.

As an alternative, we are introducing basic authentication in the agent, which implies that the operator will need to explicitly manage credentials, but in return, it does not require cluster-wide permissions on the Kubernetes API. You can enable this by setting:

```yaml
apiVersion: k8s.mariadb.com/v1alpha1
kind: MariaDB
metadata:
  name: mariadb-galera
spec:
  galera:
    agent:
      basicAuth:
        enabled: true
```

### Support for `args` in `MariaDB`

See https://github.com/mariadb-operator/mariadb-operator/pull/888.

Kudos to @onesolpark for this contribution! üôèüèª

### Fix ephemeral storage reconcile

See https://github.com/mariadb-operator/mariadb-operator/pull/865.

Kudos to @Uburro for this contribution! üôèüèª

---

We value your feedback! If you encounter any issues or have suggestions, please [open an issue on GitHub](https://github.com/mariadb-operator/mariadb-operator/issues/new/choose). Your input is crucial to improve `{{ .ProjectName }}`ü¶≠.

Join us on Slack: **[MariaDB Community Slack](https://r.mariadb.com/join-community-slack)**.