name: OLM

on:
  push:
    tags:
      - "olm-*"

jobs:
  args:
    name: Arguments
    runs-on: ubuntu-latest
    outputs:
      BUILD_DATE: ${{ steps.args.outputs.BUILD_DATE }}
      TAG: ${{ steps.args.outputs.TAG }}
      VERSION: ${{ steps.args.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --force --tags

      - name: Version
        id: args
        run: |
          function get_version() {
            echo "$1" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+'
          }
          TAG=${GITHUB_REF/refs\/tags\//}
          VERSION=$(get_version "$TAG")
          MAKE_VERSION=$(get_version $(make version))
          
          if [ "$VERSION" != "$MAKE_VERSION" ]; then
            echo "Tag('$TAG') with version('$VERSION') and Makefile version('$MAKE_VERSION') don't match!"
            exit 1;
          fi

          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
  
  bundle:
    name: Bundle
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - args
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: "${{ secrets.GHA_TOKEN }}"

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login Docker MariaDB
        uses: docker/login-action@v3
        with:
          registry: docker-registry.mariadb.com
          username: ${{ secrets.DOCKER_MARIADB_USER }}
          password: ${{ secrets.DOCKER_MARIADB_PASSWORD }}

      - name: Create cluster for scorecard tests
        run: make cluster
    
      - name: Regenerate bundle with new digests
        run: |
          make bundle
          make bundle-scorecard
        # TODO: re-enable when the multi-arch operand images are available
        # env:
        #   BUNDLE_VALIDATE_FLAGS: "--select-optional suite=operatorframework --select-optional name=multiarch"
  
      - name: Commit changes
        run: |
          git add .
          git commit -am "Updated OLM bundle (${{ needs.args.outputs.VERSION }})"
          git push

      - name: Publish bundle image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile.bundle
          tags: |
            mariadb/mariadb-operator-enterprise-bundle:v${{ needs.args.outputs.VERSION }}
            mariadb/mariadb-operator-enterprise-bundle:latest
          labels: |
            org.opencontainers.image.title=MariaDB Operator Enterprise bundle
            org.opencontainers.image.description=Run and operate MariaDB Enterprise in OpenShift
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.args.outputs.VERSION }}
            org.opencontainers.image.created=${{ needs.args.outputs.BUILD_DATE }}
   
  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - args
      - bundle
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: "${{ secrets.GHA_TOKEN }}"
        with:
          tag_name: "${{ needs.args.outputs.TAG }}"
          files: deploy/olm/manifests/mariadb-operator-enterprise.clusterserviceversion.yaml

      - name: Operator PR
        uses: mariadb-operator/openshift-operator-pr@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GHA_TOKEN }}"
        with:
          name: "mariadb-operator-enterprise"
          version: "${{ needs.args.outputs.VERSION }}"
          fork-repo-name: "mariadb-operator/certified-operators"
          upstream-repo-name: "redhat-openshift-ecosystem/certified-operators"
          bundle-path-dir: "deploy/olm"
          ci-path-file: "deploy/olm/ci.yaml"
          user-name: "Martin Montes"
          user-email: "martin11lrx@gmail.com"
          draft: true # TODO: switch to dry-run mode once PR is verified
          # dry-run: true